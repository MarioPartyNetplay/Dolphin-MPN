name: Linux-AppImage CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
  pull_request:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    # Submoudle
    - name: Checkout Submodles
      run: git submodule update --init --recursive
    # Setup CMake
    - name: Setup CMake
      uses: Symbitic/install-cmake@v0.1.1
      with:
        platform: linux
    # Setup Packages
    - name: Setup Packages
      run: sudo apt update && sudo apt upgrade && sudo apt install p7zip-full build-essential git cmake ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libevdev-dev libusb-1.0-0-dev libxrandr-dev libxi-dev libpangocairo-1.0-0 qt6-base-private-dev libbluetooth-dev libasound2-dev libpulse-dev libgl1-mesa-dev libudev-dev libsystemd-dev dpkg-dev
    # Run CMake
    - name: Run CMake
      run: mkdir build && cd build && cmake .. -G Ninja -DLINUX_LOCAL_DEV=true -DCPACK_PACKAGE_CONTACT="Mario Party Netplay" -DDISTRIBUTOR="Mario Party Netplay"
    # Build Project
    - name: Run Make
      run: cd build && ninja -j$(nproc)
    # Configure Dolphin
    - name: Configure Dolphin
      run: cd build && mkdir Binaries/OUT/ && cp -r ../Data/Sys/ Binaries/OUT/ && cp -r ../Data/User/ Binaries/OUT/ && cp -r ../Data/dolphin-emu.png Binaries/OUT/ && touch Binaries/OUT/portable.txt
    # Install linuxdeploy
    - name: 'Install linuxdeploy'
      run: |
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
    # Create AppImage
    - name: 'Create AppImage'
      run: |
        ./linuxdeploy-x86_64.AppImage --appdir AppDir -e "dolphin-mpn" -i /home/runner/work/Dolphin-MPN/Dolphin-MPN/Data/dolphin-emu.png -d /home/runner/work/Dolphin-MPN/Dolphin-MPN/Data/dolphin-emu.desktop --plugin qt --output appimage
        rm linuxdeploy-x86_64.AppImage
        rm linuxdeploy-plugin-qt-x86_64.AppImage
        mv *.AppImage /home/runner/work/Dolphin-MPN/Dolphin-MPN/build/Binaries/OUT/DolphinMPN-Linux.AppImage

    # Upload Artifact
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: DolphinMPN-Linux-AppImage
        path: /home/runner/work/Dolphin-MPN/Dolphin-MPN/build/Binaries/OUT/
