# This is a basic workflow to help you get started with Actions

name: Dolphin-MPN CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
  pull_request:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Setup CMake
    - name: Setup CMake
      if: matrix.os == 'ubuntu-latest'
      uses: Symbitic/install-cmake@v0.1.1
      with:
        platform: linux
        
    - name: Setup CMake
      if: matrix.os == 'macos-latest'
      uses: Symbitic/install-cmake@v0.1.1
      with:
        platform: mac

    # Submoudle
    - name: Checkout Submodles
      run: git submodule update --init --recursive
  
    # Setup Packages
    - name: Setup Packages
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt update && sudo apt upgrade && sudo apt install p7zip build-essential git cmake ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libevdev-dev libusb-1.0-0-dev libxrandr-dev libxi-dev libpangocairo-1.0-0 qt6-base-private-dev libbluetooth-dev libasound2-dev libpulse-dev libgl1-mesa-dev libudev-dev libsystemd-dev dpkg-dev
   
    - name: Setup Packages
      if: matrix.os == 'macos-latest'
      run: brew install qt6 pkgconfig p7zip
      
    - name: Setup Packages
      if: matrix.os == 'windows-latest'
      run: choco install 7zip
 
    # Use Static ZSTD
    - name: Remove ZSTD
      if: matrix.os == 'macos-latest'
      run: brew uninstall zstd curl php --force --ignore-dependencies

    # Run CMake
    - name: Run CMake
      if: matrix.os == 'macos-latest'
      run: mkdir build && cd build && cmake .. -G Ninja -DLINUX_LOCAL_DEV=true -DCPACK_PACKAGE_CONTACT="Mario Party Netplay"
    
    # Run CMake
    - name: Run CMake
      if: matrix.os == 'ubuntu-latest'
      run: mkdir -p build && cd build && cmake .. -G Ninja -DCMAKE_CXX_FLAGS="-Xclang -fcolor-diagnostics" -DCMAKE_PREFIX_PATH=$(brew --prefix qt6)

    # Setup MSBuild For Later Usage
    - name: Setup MSBuild
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.0.2
      with:
        vs-version: '16.6.2'

    # Build Project
    - name: Run Make
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: cd build && ninja -j$(nproc)
      
    # Run MSBuild
    - name: Build Solution
      if: matrix.os == 'windows-latest'
      run: msbuild "D:\a\dolphin-mpn-src\dolphin-mpn-src\Source\dolphin-emu.sln" /verbosity:minimal /property:Configuration=Release  /property:Platform=x64
      
    # Configure Dolphin
    - name: Configure Dolphin
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: cd build && cp -r ../Data/Sys/ Binaries/ && cp -r ../Data/User/ Binaries/ && cp -r ../Data/dolphin-emu.png Binaries/ && touch Binaries/portable.txt
    
    # Zip Artifacts
    - name: Zip Artifacts
      if: matrix.os == 'ubuntu-latest
      run: 7z a -r /home/runner/DolphinMPN-Linux /home/runner/work/dolphin-mpn-src/dolphin-mpn-src/build/Binaries/
    
    - name: Zip Artifacts
      if: matrix.os == 'macos-latest
      run: 7z a -r /Users/runner/DolphinMPN-macOS /Users/runner/work/dolphin-mpn-src/dolphin-mpn-src/build/Binaries/
      
    - name: Zip Artifacts
      if: matrix.os == 'windows-latest
      run: 7z a -r D:\DolphinMPN-win32 D:\a\dolphin-mpn-src\dolphin-mpn-src\Binary\x64

    # Upload Artifact
    - name: Upload Build Artifact
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: DolphinMPN-Linux
        path: /home/runner/work/dolphin-mpn-src/dolphin-mpn-src/build/Binaries/
        
    - name: Upload Build Artifact
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v2
      with:
        name: DolphinMPN-macOS
        path: /Users/runner/work/dolphin-mpn-src/dolphin-mpn-src/build/Binaries/
        
    - name: Upload Build Artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: DolphinMPN-win32
        path: D:\a\dolphin-mpn-src\dolphin-mpn-src\Binary\x64
        
    # Upload Build Artifact to Releases
    - name: Upload Build Artifact to Releases
      if: matrix.os == 'windows-latest
      uses: SierraSoftworks/gh-releases@v1.0.7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        overwrite: 'true'
        files: D:\DolphinMPN-win32.7z
        
    - name: Upload Build Artifact to Releases
      if: matrix.os == 'macOS-latest
      uses: SierraSoftworks/gh-releases@v1.0.7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        overwrite: 'true'
        files: /Users/runner/DolphinMPN-macos.7z
        
    - name: Upload Build Artifact to Releases
      if: matrix.os == 'ubuntu-latest
      uses: SierraSoftworks/gh-releases@v1.0.7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        overwrite: 'true'
        files: /home/runner/DolphinMPN-linux.7z

