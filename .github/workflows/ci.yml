name: Combined CI
on:
  push: null
  pull_request: null
jobs:
  build_flatpak:
    name: Flatpak Linux x86_64
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-nightly
      options: --privileged
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Setup Packages
        run: >
          flatpak remote-add --if-not-exists flathub
          https://flathub.org/repo/flathub.flatpakrepo && \

          flatpak install org.kde.Sdk//5.15 org.kde.Platform//5.15 -y && \

          dnf install libusb1-devel cmake git gcc-c++ libXext-devel libgudev qt6-qtbase-devel systemd-devel openal-soft-devel libevdev-devel libao-devel SOIL-devel libXrandr-devel pulseaudio-libs-devel bluez-libs-devel p7zip SDL2-devel make automake gcc gcc-c++ kernel-devel -y
      - name: Run Flatpak Builder
        uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          manifest-path: Distribution/flatpak.yml
          bundle: DolphinMPN-flatpak-linux-x86_64.flatpak
  build_deb24_04:
    name: Ubuntu Linux 24.04 x86_64
    runs-on: ubuntu-24.04
    steps:
      - name: Install Git
        run: |
          sudo apt update
          sudo apt install -y git
      - uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-24.04-${{ hashFiles('**/ci.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-24.04-
      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: |
            build
            ~/.cache/cmake
          key: ${{ runner.os }}-cmake-24.04-${{ hashFiles('**/CMakeLists.txt',
            '**/cmake/**') }}-${{ github.sha }}
          restore-keys: >
            ${{ runner.os }}-cmake-24.04-${{ hashFiles('**/CMakeLists.txt',
            '**/cmake/**') }}-

            ${{ runner.os }}-cmake-24.04-
      - name: Setup Packages
        run: >
          sudo apt update --fix-missing

          sudo apt install ninja-build dpkg-dev qt6-base-dev build-essential git cmake ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libevdev-dev libusb-1.0-0-dev libxrandr-dev libxi-dev libpangocairo-1.0-0 qt6-base-private-dev libqt6svg6-dev libbluetooth-dev libasound2-dev libpulse-dev libgl1-mesa-dev libcurl4-openssl-dev
      - name: Build
        run: >
          mkdir -p build && cd build && cmake .. -G Ninja -DDISTRIBUTOR="Mario Party
          Netplay" && ninja -j8 && ninja package && mkdir -p OUT && mv *.deb
          OUT/
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DolphinMPN-ubuntu-24.04-linux-x86_64
          path: build/OUT/
  build_deb22_04:
    name: Ubuntu Linux 22.04 x86_64
    runs-on: ubuntu-22.04
    steps:
      - name: Install Git
        run: |
          sudo apt update
          sudo apt install -y git
      - uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-22.04-${{ hashFiles('**/ci.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-22.04-
      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: |
            build
            ~/.cache/cmake
          key: ${{ runner.os }}-cmake-22.04-${{ hashFiles('**/CMakeLists.txt',
            '**/cmake/**') }}-${{ github.sha }}
          restore-keys: >
            ${{ runner.os }}-cmake-22.04-${{ hashFiles('**/CMakeLists.txt',
            '**/cmake/**') }}-

            ${{ runner.os }}-cmake-22.04-
      - name: Setup Packages
        run: >
          sudo apt update --fix-missing

          sudo apt install ninja-build dpkg-dev qt6-base-dev build-essential git cmake ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libevdev-dev libusb-1.0-0-dev libxrandr-dev libxi-dev libpangocairo-1.0-0 qt6-base-private-dev libqt6svg6-dev libbluetooth-dev libasound2-dev libpulse-dev libgl1-mesa-dev libcurl4-openssl-dev
      - name: Build
        run: >
          mkdir -p build && cd build && cmake .. -G Ninja -DDISTRIBUTOR="Mario Party
          Netplay" && ninja -j8 && ninja package && mkdir -p OUT && mv *.deb
          OUT/
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DolphinMPN-ubuntu-22.04-linux-x86_64
          path: build/OUT/
  build_macos:
    name: macOS Build universal
    runs-on: macos-14
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install Packages
        run: |
          brew install gnu-sed
          if ! brew install ccache ninja; then
            brew update
            brew install ccache ninja
          fi
      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: ~/deps
          key: macOS deps ${{ hashFiles('.github/workflows/ci.yml') }}
      - name: Build Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          #!/bin/bash
          set -e
          
          export MACOSX_DEPLOYMENT_TARGET=11.00
          INSTALLDIR="$HOME/deps"
          NPROCS="$(getconf _NPROCESSORS_ONLN)"
          SDL=SDL2-2.30.9
          QT=6.2.10
          QT_SUFFIX=-opensource
          
          mkdir deps-build
          cd deps-build

          export PKG_CONFIG_PATH="$INSTALLDIR/lib/pkgconfig:$PKG_CONFIG_PATH"
          export LDFLAGS="-L$INSTALLDIR/lib -dead_strip $LDFLAGS"
          export CFLAGS="-I$INSTALLDIR/include -Os $CFLAGS"
          export CXXFLAGS="-I$INSTALLDIR/include -Os $CXXFLAGS"

          echo "Downloading dependencies..."
          curl -L \
            -O "https://libsdl.org/release/$SDL.tar.gz" \
            -O "https://download.qt.io/archive/qt/${QT%.*}/$QT/submodules/qtbase-everywhere$QT_SUFFIX-src-$QT.tar.xz" \
            -O "https://download.qt.io/archive/qt/${QT%.*}/$QT/submodules/qtsvg-everywhere$QT_SUFFIX-src-$QT.tar.xz" \
            -O "https://download.qt.io/archive/qt/${QT%.*}/$QT/submodules/qttools-everywhere$QT_SUFFIX-src-$QT.tar.xz" \
            -O "https://download.qt.io/archive/qt/${QT%.*}/$QT/submodules/qttranslations-everywhere$QT_SUFFIX-src-$QT.tar.xz"
          echo "Installing SDL..."
          tar xf "$SDL.tar.gz"
          cd "$SDL"
          CC="clang -arch x86_64 -arch arm64" ./configure --prefix "$INSTALLDIR" --without-x
          make "-j$NPROCS"
          make install
          cd ..


          echo "Installing Qt Base..."
          tar xf "qtbase-everywhere$QT_SUFFIX-src-$QT.tar.xz"
          cd "qtbase-everywhere-src-$QT"
          cmake -B build -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DCMAKE_PREFIX_PATH="$INSTALLDIR" -DCMAKE_INSTALL_PREFIX="$INSTALLDIR" -DCMAKE_BUILD_TYPE=Release -DFEATURE_optimize_size=ON -DFEATURE_dbus=OFF -DFEATURE_framework=OFF -DFEATURE_icu=OFF -DFEATURE_opengl=OFF -DFEATURE_printsupport=OFF -DFEATURE_sql=OFF -DFEATURE_gssapi=OFF -DFEATURE_system_png=OFF -DFEATURE_system_jpeg=OFF -DCMAKE_MESSAGE_LOG_LEVEL=STATUS
          make -C build "-j$NPROCS"
          make -C build install
          cd ..


          echo "Installing Qt SVG..."
          tar xf "qtsvg-everywhere$QT_SUFFIX-src-$QT.tar.xz"
          cd "qtsvg-everywhere-src-$QT"
          cmake -B build -DCMAKE_PREFIX_PATH="$INSTALLDIR" -DCMAKE_INSTALL_PREFIX="$INSTALLDIR" -DCMAKE_BUILD_TYPE=Release
          make -C build "-j$NPROCS"
          make -C build install
          cd ..


          echo "Installing Qt Tools..."
          tar xf "qttools-everywhere$QT_SUFFIX-src-$QT.tar.xz"
          cd "qttools-everywhere-src-$QT"

          patch -u src/linguist/CMakeLists.txt <<EOF
          --- src/linguist/CMakeLists.txt
          +++ src/linguist/CMakeLists.txt
          @@ -14,7 +14,7 @@
           add_subdirectory(lrelease-pro)
           add_subdirectory(lupdate)
           add_subdirectory(lupdate-pro)
          -if(QT_FEATURE_process AND QT_FEATURE_pushbutton AND QT_FEATURE_toolbutton AND TARGET Qt::Widgets AND NOT no-png)
          +if(QT_FEATURE_process AND QT_FEATURE_pushbutton AND QT_FEATURE_toolbutton AND TARGET Qt::Widgets AND TARGET Qt::PrintSupport AND NOT no-png)
               add_subdirectory(linguist)
           endif()
          EOF

          cmake -B build -DCMAKE_PREFIX_PATH="$INSTALLDIR" -DCMAKE_INSTALL_PREFIX="$INSTALLDIR" -DCMAKE_BUILD_TYPE=Release -DFEATURE_assistant=OFF -DFEATURE_clang=OFF -DFEATURE_designer=OFF -DFEATURE_kmap2qmap=OFF -DFEATURE_pixeltool=OFF -DFEATURE_pkg_config=OFF -DFEATURE_qev=OFF -DFEATURE_qtattributionsscanner=OFF -DFEATURE_qtdiag=OFF -DFEATURE_qtplugininfo=OFF -DFEATURE_linguist=OFF

          make -C build "-j$NPROCS"

          make -C build install

          cd ..


          echo "Installing Qt Translations... "

          tar xf "qttranslations-everywhere$QT_SUFFIX-src-$QT.tar.xz"

          cd "qttranslations-everywhere-src-$QT"

          cmake -B build -DCMAKE_PREFIX_PATH="$INSTALLDIR" -DCMAKE_INSTALL_PREFIX="$INSTALLDIR" -DCMAKE_BUILD_TYPE=Release

          make -C build "-j$NPROCS"

          cd ..


          echo "Cleaning up..."
          cd ..
          rm -rf deps-build
          
          echo "Dependencies built successfully in $INSTALLDIR"
      - name: Cache MoltenVK
        id: cache-moltenvk
        uses: actions/cache@v4
        with:
          path: ~/moltenvk
          key: macOS MoltenVK ${{ hashFiles('Externals/MoltenVK') }}
      - name: Build MoltenVK
        if: steps.cache-moltenvk.outputs.cache-hit != 'true'
        run: >
          MVK_VER="$(sed -nr 's/^.*set\(MOLTENVK_VERSION "([^"]+)".*$/\1/p'
          Externals/MoltenVK/CMakeLists.txt)"

          if [ -z "$MVK_VER" ]; then
            echo "::error::Failed to parse MoltenVK version from CMakeLists"
            exit 1
          fi

          git clone --depth 1 --branch "$MVK_VER" https://github.com/KhronosGroup/MoltenVK.git mvk-build

          pushd mvk-build

          git apply ../Externals/MoltenVK/patches/*.patch

          ./fetchDependencies --macos

          make macos

          ls -l Package/Release/MoltenVK/dynamic/*

          chmod 755 Package/Release/MoltenVK/dynamic/dylib/macOS/libMoltenVK.dylib

          mkdir -p "$HOME/moltenvk/lib/"

          mv Package/Release/MoltenVK/dynamic/dylib/macOS/libMoltenVK.dylib "$HOME/moltenvk/lib/"

          popd

          rm -rf mvk-build
      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: |
            build
            build-arm
            ~/.cache/cmake
          key: ${{ runner.os }}-cmake-macos-${{ hashFiles('**/CMakeLists.txt',
            '**/cmake/**') }}-${{ github.sha }}
          restore-keys: >
            ${{ runner.os }}-cmake-macos-${{ hashFiles('**/CMakeLists.txt',
            '**/cmake/**') }}-

            ${{ runner.os }}-cmake-macos-
      - name: Generate CMake Files
        run: |
          COMMON_ARGS=(
            -DCMAKE_PREFIX_PATH="$HOME/deps;$HOME/moltenvk"
            -DCMAKE_BUILD_TYPE=Release
            -DUSE_BUNDLED_MOLTENVK=OFF
            -DMACOS_CODE_SIGNING=OFF
            -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
            -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON
            -DUSE_SYSTEM_LIBS=OFF
            -DUSE_SYSTEM_BZIP2=ON
            -DUSE_SYSTEM_CURL=ON
            -DUSE_SYSTEM_ICONV=ON
            -DUSE_SYSTEM_SDL3=OFF

            -G Ninja
          )

          cmake -DCMAKE_OSX_ARCHITECTURES=x86_64 \
                -DCMAKE_SYSTEM_PROCESSOR=x86_64 \
                -DCMAKE_SYSTEM_NAME=Darwin \
                -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
                "${COMMON_ARGS[@]}" \
                -B build .
          cmake -DCMAKE_OSX_ARCHITECTURES=arm64 \
                -DCMAKE_SYSTEM_PROCESSOR=arm64 \
                -DCMAKE_SYSTEM_NAME=Darwin \
                -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
                "${COMMON_ARGS[@]}" \
                -B build-arm .
      - name: Dolphin-Build Number
        run: >
          export LASTCOMMIT=$(git log --pretty=format:%H -1)

          export DOLPHINVER="v3.1.2-mainline-beta.3"

          echo "DOLPHIN Build $DOLPHINVER"

          echo "DOLPHINVER=$DOLPHINVER" >> $GITHUB_ENV

          gsed -i "s|\${DOLPHIN_WC_DESCRIBE}|$DOLPHINVER|g" Source/Core/Common/scmrev.h.in
      - name: Build Dolphin (x86_64)
        working-directory: build
        run: ninja
      - name: Build Dolphin (arm64)
        working-directory: build-arm
        run: ninja
      - name: Prepare Build Artifacts
        run: >
          lipo -create build/Binaries/DolphinQt.app/Contents/MacOS/DolphinQt
          build-arm/Binaries/DolphinQt.app/Contents/MacOS/DolphinQt -o dolphin

          mv dolphin build/Binaries/DolphinQt.app/Contents/MacOS/DolphinQt

          mv build/Binaries/DolphinQt.app "Dolphin-MPN.app"

          mkdir -p build/OUT

          mv build/Binaries/Dolphin-MPN.app build/OUT/

          cd build/OUT

          hdiutil create -volname "Dolphin-MPN" -srcfolder Dolphin-MPN.app -ov -format UDZO DolphinMPN-macOS-universal.dmg

          rm -rf Dolphin-MPN.app
      - name: Codesign Executable
        run: >
          if [ -n "${{ secrets.MACOS_CERTIFICATE }}" ]; then
            echo "Code signing with local certificate..."
            
            # Create a temporary keychain
            security create-keychain -p "temp" build.keychain
            security list-keychains -s build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "temp" build.keychain
            security set-keychain-settings build.keychain

            # Import the certificate
            echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 -d > certificate.p12
            security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign

            # Set the certificate as trusted
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temp" build.keychain

            # Code sign the app (use --deep for complete signing)
            codesign --force --deep --sign "66B0C1FCF086977A36F88689D6FBD6269400E086" --keychain build.keychain "/build/OUT/Dolphin-MPN.app" -v

            # Clean up
            security delete-keychain build.keychain
            rm -f certificate.p12
          else
            echo "No certificate provided, skipping code signing"
          fi
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DolphinMPN-macOS-universal
          path: DolphinMPN-macOS-universal.dmg
  build_windows_x86_64:
    name: Windows x86_64
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Cache MSBuild artifacts
        uses: actions/cache@v4
        with:
          path: |
            Binary
            Source/**/bin
            Source/**/obj
            packages
          key: ${{ runner.os }}-msbuild-${{ hashFiles('**/*.vcxproj', '**/*.sln',
            '**/*.props') }}-${{ github.sha }}
          restore-keys: >
            ${{ runner.os }}-msbuild-${{ hashFiles('**/*.vcxproj', '**/*.sln',
            '**/*.props') }}-

            ${{ runner.os }}-msbuild-
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          vs-version: 16.6.2
      - name: Build
        run: msbuild "Source\dolphin-emu.sln" /verbosity:minimal
          /property:Configuration=Release /property:Platform=x64
          
      - name: Trusted Signing
        uses: azure/trusted-signing-action@v0.5.1
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://eus.codesigning.azure.net/
          trusted-signing-account-name: TabithaHanegan
          certificate-profile-name: vscx-certificate-profile
          files-folder: Binary/x64/
          files-folder-filter: exe,dll
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DolphinMPN-windows-x86_64
          path: Binary/x64/
  
  build_archlinux:
    name: Arch Linux x86_64
    runs-on: ubuntu-latest
    container:
      image: archlinux:base-devel
      options: --privileged
    steps:

    - name: Checkout Repository
      uses: actions/checkout@v5

    - name: Install Git
      run: |
        pacman -Sy --noconfirm git

    - name: Setup Build User
      run: |
        # Create a non-root user for building
        useradd -m -G wheel builder
        echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
        # Check what directories exist and give builder user access
        pwd
        ls -la
        chown -R builder:builder .

    - name: Build
      run: |
        sudo -u builder bash -c "
          cd Distribution
          # Update package database and install dependencies
          pacman -Sy --noconfirm
          pacman -S --noconfirm --needed cmake ninja qt6-tools
          # Run makepkg without installing dependencies (-s instead of -si)
          makepkg -s
          
          # Move the built package to Distribution/OUT
          mkdir -p OUT
          mv *.pkg.tar.zst OUT/ || mv *.pkg.tar.gz OUT/ || mv *.pkg.tar.xz OUT/ || echo 'No package found to move'
        "
      
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: DolphinMPN-archlinux-x86_64
        path: Distribution/OUT/