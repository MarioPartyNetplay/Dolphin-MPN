 name: Combined CI

 on:
  push:
  pull_request:

 jobs:
  build_flatpak:
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-nightly
      options: --privileged
    steps:
    - uses: actions/checkout@v2
    - name: Purge .git for space reasons
      run: rm -rf /home/runner/work/Dolphin-MPN-src/Dolphin-MPN-src/.git
    - name: Setup Packages
      run: |
        flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo && \
        flatpak install org.kde.Sdk//5.15 org.kde.Platform//5.15 -y && \
        dnf install libusb1-devel cmake git gcc-c++ libXext-devel libgudev qt6-qtbase-devel systemd-devel openal-soft-devel libevdev-devel libao-devel SOIL-devel libXrandr-devel pulseaudio-libs-devel bluez-libs-devel p7zip SDL2-devel make automake gcc gcc-c++ kernel-devel -y
    - name: Run Flatpak Builder
      uses: flatpak/flatpak-github-actions/flatpak-builder@v6
      with:
        manifest-path: Distribution/flatpak.yml
        bundle: DolphinMPN-flatpak-linux-x86_64.flatpak

  build_deb24_04:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v2
    - name: Setup Submodules
      run: git config --global --add safe.directory /__w/Dolphin-MPN/Dolphin-MPN && git submodule update --init --recursive
    - name: Setup Packages
      run: |
        sudo apt update --fix-missing
        sudo apt install ninja-build dpkg-dev qt6-base-dev build-essential git cmake ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libevdev-dev libusb-1.0-0-dev libxrandr-dev libxi-dev libpangocairo-1.0-0 qt6-base-private-dev libqt6svg6-dev libbluetooth-dev libasound2-dev libpulse-dev libgl1-mesa-dev libcurl4-openssl-dev
    - name: Build
      run: |
        mkdir -p build && cd build && cmake .. -G Ninja -DDISTRIBUTOR="Mario Party Netplay" && ninja -j8 && ninja package && mkdir -p OUT && mv *.deb OUT/
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: DolphinMPN-ubuntu-24.04-linux-x86_64
        path: build/OUT/

  build_deb22_04:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
    - name: Setup Submodules
      run: git config --global --add safe.directory /__w/Dolphin-MPN/Dolphin-MPN && git submodule update --init --recursive
    - name: Setup Packages
      run: |
        sudo apt update --fix-missing
        sudo apt install ninja-build dpkg-dev qt6-base-dev build-essential git cmake ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libevdev-dev libusb-1.0-0-dev libxrandr-dev libxi-dev libpangocairo-1.0-0 qt6-base-private-dev libqt6svg6-dev libbluetooth-dev libasound2-dev libpulse-dev libgl1-mesa-dev libcurl4-openssl-dev
    - name: Build
      run: |
        mkdir -p build && cd build && cmake .. -G Ninja -DDISTRIBUTOR="Mario Party Netplay" && ninja -j8 && ninja package && mkdir -p OUT && mv *.deb OUT/
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: DolphinMPN-ubuntu-22.04-linux-x86_64
        path: build/OUT/
        
  build_macos:
    runs-on: macos11-x64-nayla
    steps:
    - uses: actions/checkout@v2
    - name: Setup Submodules
      run: git config --global --add safe.directory . && git submodule update --init --recursive
    - name: Build
      run: |
        mkdir -p build && cd build && cmake .. -G Ninja -DCMAKE_CXX_FLAGS="-Xclang -fcolor-diagnostics" -DCMAKE_PREFIX_PATH=$(brew --prefix qt6) -DDISTRIBUTOR="Mario Party Netplay" && ninja -j8
    - name: Prepare macOS Build Artifact
      # yes we have to double zip to preserve perms.
      run: |
        mv build/Binaries/Dolphin.app build/Binaries/Dolphin-MPN.app
        mkdir -p build/OUT
        mv build/Binaries/Dolphin-MPN.app build/OUT/
        cd build/OUT
        xattr -cr Dolphin-MPN.app
        zip -r DolphinMPN-macOS-x86_64.zip Dolphin-MPN.app
        rm -rf Dolphin-MPN.app
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: DolphinMPN-macOS-x86_64
        path: build/OUT/


  build_windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Submodules
      run: git config --global --add safe.directory . && git submodule update --init --recursive
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.2
      with:
        vs-version: '16.6.2'
    - name: Build
      run: msbuild "Source\dolphin-emu.sln" /verbosity:minimal /property:Configuration=Release /property:Platform=x64
    - name: Trusted Signing
      uses: azure/trusted-signing-action@v0.5.1
      with:
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        endpoint: https://eus.codesigning.azure.net/
        trusted-signing-account-name: TabithaHanegan
        certificate-profile-name: vscx-certificate-profile
        files-folder: Binary/x64/
        files-folder-filter: exe,dll
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: DolphinMPN-windows-x86_64
        path: Binary/x64/
